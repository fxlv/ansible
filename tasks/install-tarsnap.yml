---
- name: Install Tarsnap backup tool
  hosts: all
  become: true
  vars:
    tarsnap_key_url: "https://pkg.tarsnap.com/tarsnap-deb-packaging-key.asc"
    
    # Tarsnap backup configuration
    tarsnap_backup_dirs:
      - /home
      - /etc
    tarsnap_exclude_patterns:
      - "*.tmp"
      - "*.cache" 
      - "*/.git"
      - "*/node_modules"
      - "*/__pycache__"
    tarsnap_max_archives: 30
    tarsnap_keyfile: "/root/tarsnap.key"
    tarsnap_log_file: "/var/log/tarsnap-backup.log"
    tarsnap_bin: "/usr/bin/tarsnap"
    tarsnap_enable_notifications: true
  
  tasks:
    - name: Check if running on Debian/Ubuntu
      fail:
        msg: "This playbook only supports Debian/Ubuntu systems"
      when: ansible_os_family != "Debian"

    - name: Check if Tarsnap is already installed
      command: which tarsnap
      register: tarsnap_check
      failed_when: false
      changed_when: false

    - name: Skip installation if Tarsnap already exists
      debug:
        msg: "Tarsnap is already installed, skipping installation steps"
      when: tarsnap_check.rc == 0

    - name: Download Tarsnap GPG key
      get_url:
        url: "{{ tarsnap_key_url }}"
        dest: "/tmp/tarsnap-key.asc"
        mode: '0644'
        timeout: 30
      when: tarsnap_check.rc != 0

    - name: Import Tarsnap GPG key
      apt_key:
        file: "/tmp/tarsnap-key.asc"
        state: present
      when: tarsnap_check.rc != 0

    - name: Add Tarsnap repository
      apt_repository:
        repo: "deb http://pkg.tarsnap.com/deb/{{ ansible_distribution_release }} ./"
        state: present
        update_cache: false
      when: tarsnap_check.rc != 0

    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600
      when: tarsnap_check.rc != 0

    - name: Install Tarsnap
      apt:
        name: tarsnap
        state: present
      when: tarsnap_check.rc != 0

    - name: Clean up temporary GPG key file
      file:
        path: "/tmp/tarsnap-key.asc"
        state: absent
      when: tarsnap_check.rc != 0

    - name: Verify Tarsnap installation
      command: tarsnap --version
      register: tarsnap_version
      changed_when: false

    - name: Display Tarsnap version
      debug:
        msg: "Tarsnap installed successfully: {{ tarsnap_version.stdout }}"


    - name: Deploy Tarsnap backup script
      template:
        src: templates/tarsnap-backup.sh.j2
        dest: /usr/local/bin/tarsnap-backup.sh
        owner: root
        group: root
        mode: '0755'

    - name: Create log directory for Tarsnap
      file:
        path: "{{ tarsnap_log_file | dirname }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Set up cron job for Tarsnap backups
      cron:
        name: "Tarsnap automatic backup"
        minute: "0"
        hour: "*/4"
        job: "/usr/local/bin/tarsnap-backup.sh"
        user: root
        state: present

    - name: Display backup configuration
      debug:
        msg: |
          Tarsnap backup script deployed to /usr/local/bin/tarsnap-backup.sh
          Backup directories: {{ tarsnap_backup_dirs | join(', ') }}
          Exclude patterns: {{ tarsnap_exclude_patterns | join(', ') }}
          Max archives: {{ tarsnap_max_archives }}
          Log file: {{ tarsnap_log_file }}
          Cron schedule: Every 4 hours (0 */4 * * *)
          Pushover notifications: {{ 'Enabled' if tarsnap_enable_notifications else 'Disabled' }}
